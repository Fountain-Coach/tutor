import Foundation

public func makeTriadCSD(rootHz: Double, duration: Double, quality: String = "major") -> String {
    let thirds: Double = (quality == "minor") ? pow(2.0, 3.0/12.0) : pow(2.0, 4.0/12.0)
    let fifth: Double = pow(2.0, 7.0/12.0)
    let f2 = rootHz * thirds
    let f3 = rootHz * fifth
    let instr = """
    instr 1
      kenv linseg 0, 0.05, 1, 0.85, 1, 0.10, 0
      a1 oscili 0.35 * kenv, p4
      out a1
    endin
    """
    let score = String(format: "i 1 0 %.2f %.2f\ni 1 0 %.2f %.2f\ni 1 0 %.2f %.2f\n", duration, rootHz, duration, f2, duration, f3)
    let csd = """
    <CsoundSynthesizer>
    <CsOptions>
    -odac
    </CsOptions>
    <CsInstruments>
    %@
    </CsInstruments>
    <CsScore>
    %@
    e
    </CsScore>
    </CsoundSynthesizer>
    """
    return String(format: csd, instr, score)
}

public func makeLilyPondTriad(rootHz: Double, duration: Double, tempoBPM: Int = 120, quality: String = "major") -> String {
    func midi(for freq: Double) -> Int { guard freq > 0 else { return 60 }; return Int((69.0 + 12.0 * log2(freq / 440.0)).rounded()) }
    let names = ["c","cis","d","dis","e","f","fis","g","gis","a","ais","b"]
    func lilyName(for midiNote: Int) -> String {
        let pc = (midiNote % 12 + 12) % 12
        let base = names[pc]
        let d = (midiNote - 60) / 12
        if d >= 0 { return base + String(repeating: "'", count: d + 1) }
        else { return base + String(repeating: ",", count: -d - 1) }
    }
    // durations
    let quarter = 60.0 / Double(tempoBPM)
    let denoms: [Int] = [1,2,4,8,16]
    struct Cand { let ratio: Double; let label: String }
    func lilyDurToken(for sec: Double) -> String {
        let ratio = sec / quarter
        var best = Cand(ratio: Double.greatestFiniteMagnitude, label: "4")
        var bestDiff = Double.greatestFiniteMagnitude
        for d in denoms {
            let base = 4.0 / Double(d)
            let plain = Cand(ratio: base, label: String(d))
            let dotted = Cand(ratio: base * 1.5, label: String(d) + ".")
            for c in [plain, dotted] {
                let diff = abs(ratio - c.ratio)
                if diff < bestDiff { bestDiff = diff; best = c }
            }
        }
        return best.label
    }

    let thirds: Double = (quality == "minor") ? pow(2.0, 3.0/12.0) : pow(2.0, 4.0/12.0)
    let fifth: Double = pow(2.0, 7.0/12.0)
    let chordMidis = [rootHz, rootHz * thirds, rootHz * fifth].map(midi(for:))
    let chordNames = chordMidis.map(lilyName(for:))
    let token = lilyDurToken(for: duration)
    let chord = "<" + chordNames.joined(separator: " ") + ">" + token

    let header = """
    % Generated by HelloCsound triad export
    \\version "2.24.0"
    \\header { title = "Triad" tagline = "FountainAI • Csound • LilyPond" }
    """
    let tempo = "\\tempo 4 = \(tempoBPM)"
    let body = "{ \n  \(tempo) \n  \(chord) \n}"
    return [header, body].joined(separator: "\n")
}
