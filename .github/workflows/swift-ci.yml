name: Swift Tutorials CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "**" ]

jobs:
  build-and-test:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        tutorial:
          - 01-hello-fountainai
          - 02-basic-ui-teatro
          - 03-data-persistence-fountainstore
          - 04-multimedia-midi2
          - 05-ai-integration-openapi
          - 06-screenplay-editor-capstone
          - 07-csound-studio
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare SwiftPM overrides (FountainStore identity)
        run: |
          # Ensure any local override paths can target a correctly named directory
          ln -s "$GITHUB_WORKSPACE/tutorials/03-data-persistence-fountainstore" "$GITHUB_WORKSPACE/tutorials/fountain-store" || true
          ln -s "$GITHUB_WORKSPACE/tutorials/03-data-persistence-fountainstore" "$GITHUB_WORKSPACE/fountain-store" || true
          echo "Symlinks prepared:" && ls -l tutorials | sed -n '1,120p'

      - name: Show Swift version
        run: swift --version

      - name: Build Tutor CLI
        run: |
          cd tools/tutor-cli
          swift build -c release

      - name: Setup tutorial scaffold
        working-directory: tutorials/${{ matrix.tutorial }}
        run: |
          chmod +x setup.sh
          ./setup.sh

      - name: Build
        run: tools/tutor-cli/.build/release/tutor build --dir tutorials/${{ matrix.tutorial }}

      - name: Test
        run: tools/tutor-cli/.build/release/tutor test --dir tutorials/${{ matrix.tutorial }}

      - name: Generate Coverage (SwiftPM)
        working-directory: tutorials/${{ matrix.tutorial }}
        run: |
          set -euo pipefail
          swift test --enable-code-coverage
          BIN=$(ls .build/*/debug/*PackageTests.xctest/Contents/MacOS/* 2>/dev/null | head -n1)
          PROFDATA=$(ls .build/*/debug/codecov/*.profdata 2>/dev/null | head -n1)
          if [[ -n "${BIN:-}" && -n "${PROFDATA:-}" ]]; then
            xcrun llvm-cov report "$BIN" -instr-profile "$PROFDATA" > coverage.txt || true
            xcrun llvm-cov export -format=lcov "$BIN" -instr-profile "$PROFDATA" > coverage.lcov || true
          else
            echo "No coverage artifacts found (skipping export)" > coverage.txt
          fi

      - name: Upload Coverage Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.tutorial }}
          path: |
            tutorials/${{ matrix.tutorial }}/coverage.txt
            tutorials/${{ matrix.tutorial }}/coverage.lcov

      - name: Upload to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: tutorials/${{ matrix.tutorial }}/coverage.lcov
          flags: ${{ matrix.tutorial }}
          fail_ci_if_error: false
