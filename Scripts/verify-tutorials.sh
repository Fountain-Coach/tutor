#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(cd "$(dirname "$0")/.." && pwd)"
cd "$ROOT_DIR"

fail=0

note() { printf "[info] %s\n" "$*"; }
warn() { printf "[warn] %s\n" "$*"; }
err()  { printf "[error] %s\n" "$*"; fail=1; }

is_tracked() {
  local path="$1"
  git ls-files --error-unmatch -- "$path" >/dev/null 2>&1
}

note "Verifying tutorial starter-state invariantsâ€¦"

for t in tutorials/*; do
  [[ -d "$t" ]] || continue
  name="$(basename "$t")"

  # No nested tutorials folder
  if [[ -d "$t/tutorials" ]]; then
    err "$name: nested 'tutorials/' directory found; remove it (cleanup script will)."
  fi

  # 01-hello-csound specific checks
  if [[ "$name" == "01-hello-csound" ]]; then
    # Only one score file, inside Sources
    if [[ -f "$t/hello.csd" ]]; then
      err "$name: remove duplicate score at '$name/hello.csd'; only keep Sources/HelloCsound/hello.csd"
    fi
    if [[ ! -f "$t/Sources/HelloCsound/hello.csd" ]]; then
      err "$name: missing 'Sources/HelloCsound/hello.csd' (required asset)"
    fi
    # Generated files must not be committed
    for f in \
      "Sources/HelloCsound/CsoundPlayer.swift" \
      "Sources/HelloCsound/main.swift" \
      "Tests/HelloCsoundTests/CsoundPlayerTests.swift"; do
      if is_tracked "$t/$f"; then
        err "$name: generated file is committed: $f (use setup.sh to generate at dev time)"
      fi
    done
    # Ensure resource bundling is declared in Package.swift
    if ! grep -Fq '.copy("hello.csd")' "$t/Package.swift"; then
      err "$name: Package.swift missing resource bundling for hello.csd (.copy(\"hello.csd\"))"
    fi
  fi

  # 01-hello-fountainai: committed minimal SPM package with sources and tests
  if [[ "$name" == "01-hello-fountainai" ]]; then
    if ! is_tracked "$t/Package.swift"; then err "$name: missing committed Package.swift"; fi
    if [[ ! -d "$t/Sources/HelloFountainAI" ]]; then err "$name: missing Sources/HelloFountainAI"; fi
    if [[ ! -d "$t/Tests/HelloFountainAITests" ]]; then err "$name: missing Tests/HelloFountainAITests"; fi
  fi

  # 02-basic-ui-teatro: no committed package/sources/tests (generated by setup)
  if [[ "$name" == "02-basic-ui-teatro" ]]; then
    if is_tracked "$t/Package.swift"; then err "$name: Package.swift should not be committed (setup generates it)"; fi
    # Any tracked Swift sources or tests under this lesson are disallowed
    if git ls-files -- "$t/Sources/**" "$t/Tests/**" | grep -q .; then
      err "$name: Sources/ or Tests/ should not be committed (setup generates them)"
    fi
  fi

  # 03-data-persistence-fountainstore: committed local-only package, no remote deps
  if [[ "$name" == "03-data-persistence-fountainstore" ]]; then
    if ! is_tracked "$t/Package.swift"; then err "$name: missing committed Package.swift"; fi
    if grep -Eq "\.package[[:space:]]*\(" "$t/Package.swift"; then err "$name: remote dependencies disallowed in local starter Package.swift"; fi
    if ! is_tracked "$t/FountainStore.swift"; then err "$name: missing committed FountainStore.swift (local simulator)"; fi
  fi

  # 04-multimedia-midi2: committed local-only package, no remote deps
  if [[ "$name" == "04-multimedia-midi2" ]]; then
    if ! is_tracked "$t/Package.swift"; then err "$name: missing committed Package.swift"; fi
    if grep -Eq "\.package[[:space:]]*\(" "$t/Package.swift"; then err "$name: remote dependencies disallowed in local starter Package.swift"; fi
  fi

  # 05-ai-integration-openapi: committed local-only package, no remote deps
  if [[ "$name" == "05-ai-integration-openapi" ]]; then
    if ! is_tracked "$t/Package.swift"; then err "$name: missing committed Package.swift"; fi
    if grep -Eq "\.package[[:space:]]*\(" "$t/Package.swift"; then err "$name: remote dependencies disallowed in local starter Package.swift"; fi
  fi

  # 06-screenplay-editor-capstone: committed local-only package, no remote deps
  if [[ "$name" == "06-screenplay-editor-capstone" ]]; then
    if ! is_tracked "$t/Package.swift"; then err "$name: missing committed Package.swift"; fi
    if grep -Eq "\.package[[:space:]]*\(" "$t/Package.swift"; then err "$name: remote dependencies disallowed in local starter Package.swift"; fi
  fi
done

if [[ $fail -ne 0 ]]; then
  echo
  echo "One or more tutorial invariants failed. Run Scripts/clean-tutorials.sh, then regenerate per-lesson with ./setup.sh as needed."
  exit 1
fi

note "All checks passed."
